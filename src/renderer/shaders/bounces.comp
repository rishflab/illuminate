#version 450

#define EPSILON 0.0001

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Ray {
    vec4 origin;
    vec4 direction;
};

struct Intersection {
    vec4 position;
    vec4 normal;
    vec3 edge;
    float a;
};

struct Aabb {
    vec4 min;
    vec4 max;
};

layout(binding = 0) buffer restrict readonly Triangles {
    vec4 tris[];
};

layout(std430, binding = 1) buffer restrict readonly BoundingBox {
    Aabb aabbs[];
};

layout(std430, binding = 2) buffer restrict readonly P_Rays {
    Ray p_rays[];
};

layout(std430, binding = 3) buffer restrict writeonly P_Intersections {
    Intersection p_intersections[];
};

layout(std430, binding = 4) buffer restrict B_Rays {
    Ray b_rays[];
};

layout(std430, binding = 5) buffer restrict writeonly B_Intersections {
    Intersection b_intersections[];
};


Intersection intersectTriangle(Ray ray, vec3 v1, vec3 v2, vec3 v3){
    const vec3 e1 = v2 - v1;
    const vec3 e2 = v3 - v1;
    const vec3 s1 = cross(ray.direction.xyz, e2);
    const float det = dot(e1, s1);
    const float  invd = 1.0/det;
    const vec3 d = ray.origin.xyz - v1;
    const float  b1 = dot(d, s1) * invd;
    const vec3 s2 = cross(d, e1);
    const float  b2 = dot(ray.direction.xyz, s2) * invd;
    const float temp = dot(e2, s2) * invd;

    vec3 position = (ray.origin + (ray.direction * temp)).xyz;

    vec3 normal = normalize(cross(e2, e1));

    if ( b1 < 0.0 || b1 > 1.0 || b2 < 0.0 || (b1 + b2) > 1.0 || temp <= 0.0 || det < -EPSILON ){
        return Intersection(vec4(position, 1.0), vec4(normal, 1.0), e2, -1.0);
    } else {
        return Intersection(vec4(position, 1.0), vec4(normal, 1.0), e2, temp);
    }
}


bool IntersectBox(Ray ray, Aabb box){

    vec4 tMin = (box.min - ray.origin) / ray.direction;
    vec4 tMax = (box.max - ray.origin) / ray.direction;
    vec4 t1 = min(tMin, tMax);
    vec4 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return (tFar >= tNear) ? true : false;
}

float DistanceFromOrigin(Ray ray, Intersection intersection) {
    return distance(intersection.position, ray.origin);
}


void main(){

    uint thread = gl_GlobalInvocationID.x;

    Ray ray = p_rays[thread];

    vec4 to_write = vec4(0.0, 0.0, 0.0, 0.0);

    Intersection intersection;
    intersection.a = -1.0;

    float closest_intersection = 10000000.0;

    bool hit = false;

    for (uint k = 0; k < aabbs.length(); k++){

        Aabb aabb = aabbs[k];

        if (IntersectBox(ray, aabb) ==  true) {

            for (uint j = 0; j < tris.length(); j=j+3){

                vec3 v0 = tris[j].xyz;
                vec3 v1 = tris[j+1].xyz;
                vec3 v2 = tris[j+2].xyz;

                Intersection current_intersection = intersectTriangle(ray, v0, v1, v2);

                if (current_intersection.a != -1.0) {

                    float current_distance = DistanceFromOrigin(ray, current_intersection);

                    if (current_distance < closest_intersection){
                        closest_intersection = current_distance;
                        intersection = current_intersection;
                    }
                }
            }
        }
    }

    p_intersections[thread] = intersection;

    vec4 reflection = reflect(ray.direction, intersection.normal);
    Ray bounce = Ray(intersection.position, reflection);

    b_rays[thread] = bounce;

    Intersection b_intersection;
    b_intersection.a = -1.0;

    hit = false;

    for (uint k = 0; k < aabbs.length(); k++){

        Aabb aabb = aabbs[k];

        if (IntersectBox(bounce, aabb) ==  true) {

            for (uint j = 0; j < tris.length(); j=j+3){

                vec3 v0 = tris[j].xyz;
                vec3 v1 = tris[j+1].xyz;
                vec3 v2 = tris[j+2].xyz;

                Intersection current_intersection = intersectTriangle(bounce, v0, v1, v2);

                if (current_intersection.a != -1.0) {

                    float current_distance = DistanceFromOrigin(bounce, current_intersection);

                    if (current_distance < closest_intersection){
                        closest_intersection = current_distance;
                        b_intersection = current_intersection;
                    }
                }

            }

        }
    }

    b_intersections[thread] = b_intersection;

}